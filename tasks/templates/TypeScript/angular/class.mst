export class {{{apiConfig.className}}} {
  public title = '{{{api.info.title}}}';
  public version = '{{{api.info.version}}}';
  private $http: ng.IHttpService;
  private host: string{{#api.host}} = "{{{api.host}}}"{{/api.host}};
  private basePath: string{{#api.basePath}} = "{{{api.basePath}}}"{{/api.basePath}};
  private scheme: string{{#scheme}} = "{{{scheme}}}"{{/scheme}};

  constructor($http: ng.IHttpService){
    this.$http = $http;
  }

  private buildUrl(path: string): string {
    var url: string = '';

    if (this.host) {
      if (!this.scheme) {
        url = 'https://';
      }
      else {
        url = this.scheme + '://';
      }

      url += this.host;
    }

    if (this.basePath) {
      url += this.basePath;
    }

    return url + path;
  }

  private createRequestConfig(path: string, method: string, parameters?: any): ng.IRequestConfig {
    var config: ng.IRequestConfig = {
      method: method,
      url: this.buildUrl(path)
    };

    if (parameters) {
	  var query: string;
	  var headers: any;

      for (var paramName in parameters) {
        var parameter = parameters[paramName];

        if (parameter.type === 'body') {
		  config.data = parameter.value;
        }

		if (parameter.type === 'path') {
		  config.url = config.url.replace('{' + paramName + '}', parameter.value);
        }

		    //Add query parameters only if the value is defined
        if (parameter.type === 'query' && angular.isDefined(parameter.value) && parameter.value !== null) {
          if (angular.isDefined(query)) {
            query += '&';
          }
          else {
            query = '?';
          }

          query += paramName + '=' + parameter.value;
        }

        //Add header parameters only if the value is defined
        if (parameter.type === 'header' && angular.isDefined(parameter.value) && parameter.value !== null) {
          if (!angular.isDefined(headers)) {
            headers = {};
          }

          headers[paramName] = parameter.value;
        }
      }

	    if (angular.isDefined(query)) {
	      config.url += query;
	    }

	    if(angular.isDefined(headers)) {
        config.headers = headers;
      }
    }

    return config;
  }

  public setHost(host: string) {
    this.host = host;
  }

  public setScheme(scheme: string) {
    this.scheme = scheme;
  }

  public setBasePath(basePath: string) {
    this.basePath = basePath;
  }
  {{#methodContent}}

    {{{methodContent}}}
  {{/methodContent}}
}
